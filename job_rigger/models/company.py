from pydantic import BaseModel, ConfigDict, Field


class CompanyIndustry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    localized_name: str = Field(..., alias="localizedName")
    entity_urn: str = Field(..., alias="entityUrn")


class StaffCountRange(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    start: int
    end: int


class ConfirmedLocation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    country: str
    geographic_area: str = Field(..., alias="geographicArea")
    city: str
    postal_code: str = Field(..., alias="postalCode")
    description: str
    street_address_opt_out: bool = Field(..., alias="streetAddressOptOut")
    headquarter: bool
    line1: str


class Localized(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    en_us: str = Field(..., alias="en_US")


class PreferredLocale(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    country: str
    language: str


class MultiLocaleTaglines(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    localized: Localized
    preferred_locale: PreferredLocale = Field(..., alias="preferredLocale")


class Headquarter(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    country: str
    geographic_area: str = Field(..., alias="geographicArea")
    city: str
    postal_code: str = Field(..., alias="postalCode")
    line1: str


class FoundedOn(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    year: int


class CompanyType(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    localized_name: str = Field(..., alias="localizedName")
    code: str


class Company(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    staffing_company: bool = Field(..., alias="staffingCompany")
    company_industries: list[CompanyIndustry] = Field(..., alias="companyIndustries")
    staff_count: int = Field(..., alias="staffCount")
    company_employees_search_page_url: str = Field(..., alias="companyEmployeesSearchPageUrl")
    staff_count_range: StaffCountRange = Field(..., alias="staffCountRange")
    specialities: list[str]
    confirmed_locations: list[ConfirmedLocation] = Field(..., alias="confirmedLocations")
    name: str
    tagline: str
    description: str
    entity_urn: str = Field(..., alias="entityUrn")
    headquarter: Headquarter
    paid_company: bool = Field(..., alias="paidCompany")
    universal_name: str = Field(..., alias="universalName")
    company_page_url: str = Field(..., alias="companyPageUrl")
    viewer_connected_to_administrator: bool = Field(..., alias="viewerConnectedToAdministrator")
    affiliated_companies: list = Field(..., alias="affiliatedCompanies")
    founded_on: FoundedOn = Field(..., alias="foundedOn")
    company_type: CompanyType = Field(..., alias="companyType")
    url: str
    job_search_page_url: str = Field(..., alias="jobSearchPageUrl")
    auto_generated: bool = Field(..., alias="autoGenerated")

    # @field_validator("entity_urn")
    # @classmethod
    # def extract_id_from_urn(cls, v: str) -> str:
    #     return extract_entity_id(v)
